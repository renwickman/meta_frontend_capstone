import React, { useEffect, useState } from "react";
import { Formik } from "formik";
import * as Yup from 'yup';


const BookingForm2 = (props) => {

    const getDate = (today = new Date()) => {
        return today.toISOString().slice(0, 10);
    }
    const [date, setDate] = useState("");
    const [time, setTime] = useState([]);
    const [guests, setGuests] = useState("");
    const [occasion, setOccasion] = useState("");
    
    const handleSubmit = (e) => {
        e.preventDefault();
        console.log(`Reservation: Date: ${date}, Time: ${time}, Number of Guests: ${guests}, Occasion: ${occasion}`);
        alert(`Reservation: Date: ${date}, Time: ${time}, Number of Guests: ${guests}, Occasion: ${occasion}`);
    }
    
    const scheduleValid = Yup.object().shape({
        date: Yup.date()
            .min(getDate(), "Cannot choose a date before today")
            .required('Required'),
        time: Yup.string()
            .required('Required'),
        guests: Yup.number()
            .min(1, 'Cannot go past 1')
            .max(10, 'Cannot go above 10')
            .required('Required'),
        occasion: Yup.string()
            .required('Required'),
    });

    useEffect(() => {
        dispatchEvent({ type: "initializeTimes" });
    }, []);


    return(
        <div>
            <h1>Book a Reservation</h1>

            <Formik
                initialValues={{
                    date: '',
                    time: '',
                    guests: 1,
                    occasion: '',
                }}
                validate={values => {
                    const errors = {};
                    if (!values.date) {
                        errors.date = 'Required';
                    }
                    if (!values.time) {
                        errors.time = 'Required';
                    }
                    if (!values.occasion) {
                        errors.occasion = 'Required';
                    }
                    if (!values.guests) {
                        errors.guests = 'Required';
                    }
                    else if (values.guests > 10) {
                        errors.guests = 'Cannot be more than 10 guests';
                    }
                    else if (values.guests < 1) {
                        errors.guests = 'Has to be at least 1 guest';
                    }
                    return errors;
                }}
                validationSchema={scheduleValid}
                onSubmit={values => {
                    console.log(values);
                }}
            >
                {({ errors, touched, isSubmitting }) => (

            <form onSubmit={handleSubmit}>
                <div className="Date">
                    <label htmlFor="resDate">Choose Date: </label>
                    <input
                        type="date"
                        id="resDate" 
                        value={date} 
                        onChange={(e) => {
                            setDate(e.target.value);
                            props.setAvailableTimes({ date: e.target.value });
                        }}
                        />
                </div>

                <div>{errors.date && touched.date}</div>

                <div className="Time">
                    <label htmlFor="resTime">Choose Time: </label>
                    <select 
                        id="resTime" 
                        value={time} 
                        onChange={(e) => setTime(e.target.value)}
                    >
                    {props.availableTimes?.map((hour) => (
                            <option key={hour.id} value={hour.availableTime}>
                                {hour.availableTime}
                                </option>
                        ))}
                    </select>
                </div>

                <div>{errors.time && touched.time}</div>

                <div className="Guests">
                    <label htmlFor="resGuests">Number of Guests: </label>
                    <input 
                        type="number" 
                        value={guests}
                        id="resGuests"
                        placeholder="1" 
                        min="1" 
                        max="10" 
                        onChange={(e) =>  {
                            setGuests(e.target.value)
                        }}
                    >
                    </input>
                </div>

                <div>{errors.guests && touched.guests}</div>

                <div className="Occasion">
                    <label htmlFor="resOccasion">Occasion: </label>
                    <select 
                        id="resOccasion" 
                        value={occasion} 
                        onChange={(e) => {
                            setOccasion(e.target.value)
                        }}
                    >
                        <option value="Birthday">Birthday</option>
                        <option value="Engagement">Engagement</option>
                        <option value="Anniversary">Anniversary</option>
                    </select>
                </div>

                <div>{errors.occasion && touched.occasion}</div>

                <button
                onClick={handleSubmit} type="submit" 
                disabled={isSubmitting}>Make Your Reservation</button>
            </form>
            )}
            </Formik>
        </div>
    )
}

export default BookingForm2;


         expect(onSubmit).toHaveBeenCalledWith({
             date: '2023-06-06',
             time: '17:00',
             guests: '3',
             occasion: 'Anniversary'
    });


    // test('Submission works', () => {
    //     const onSubmit = jest.fn();
    //     render(<BookingForm onClick={onSubmit} />);

    //     const dateInput = screen.getAllByLabelText('Choose Date: ');
    //     const timeInput = screen.getAllByLabelText('Choose Time: ');
    //     const guestsInput = screen.getAllByLabelText('Number of Guests: ');
    //     const occasionInput = screen.getAllByLabelText('Occasion: ');
    //     const submitButton2 = screen.getByText("Reserve Your Table");

    //     fireEvent.change(dateInput, { target: { value: '2023-06-05' } });
    //     fireEvent.change(timeInput, { target: { value: '17:00' } });
    //     fireEvent.change(guestsInput, { target: { value: '4' } });
    //     fireEvent.change(occasionInput, { target: { value: 'Anniversary' } });
    //     fireEvent.click(submitButton2);

    //     //fireEvent.click(submitButton);

    //     expect(onSubmit).toHaveBeenCalledWith({
    //         resDate: '2023-06-05',
    //         resTime: '17:00',
    //         resGuests: '4',
    //         resOccasion: 'Anniversary'
    //     });
    // });